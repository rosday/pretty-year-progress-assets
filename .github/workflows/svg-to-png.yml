name: Convert SVG to PNG

on:
  push:
    branches: [main]
    paths: ['**/*.svg']

jobs:
  convert-svg-to-png:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with: { fetch-depth: 0 }

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y librsvg2-bin imagemagick fontconfig xvfb libfontconfig1 libfreetype6
          # Disable ImageMagick security policy that might interfere with font rendering
          sudo sed -i 's/rights="none" pattern="PS"/rights="read|write" pattern="PS"/' /etc/ImageMagick-6/policy.xml
          sudo sed -i 's/rights="none" pattern="EPS"/rights="read|write" pattern="EPS"/' /etc/ImageMagick-6/policy.xml
          sudo sed -i 's/rights="none" pattern="PDF"/rights="read|write" pattern="PDF"/' /etc/ImageMagick-6/policy.xml
          sudo sed -i 's/rights="none" pattern="XPS"/rights="read|write" pattern="XPS"/' /etc/ImageMagick-6/policy.xml

      # More robust font installation
      - name: Install SF Pro Display font
        run: |
          # Create font directories
          sudo mkdir -p /usr/share/fonts/truetype/sf-pro
          sudo mkdir -p /usr/share/fonts/opentype/sf-pro
          sudo mkdir -p /usr/local/share/fonts
          sudo mkdir -p ~/.fonts
          
          # Copy fonts to multiple locations to ensure they're found
          sudo cp -v assets/fonts/*.ttf /usr/share/fonts/truetype/sf-pro/ 2>/dev/null || true
          sudo cp -v assets/fonts/*.otf /usr/share/fonts/opentype/sf-pro/ 2>/dev/null || true
          sudo cp -v assets/fonts/*.ttf /usr/local/share/fonts/ 2>/dev/null || true
          sudo cp -v assets/fonts/*.otf /usr/local/share/fonts/ 2>/dev/null || true
          cp -v assets/fonts/*.ttf ~/.fonts/ 2>/dev/null || true
          cp -v assets/fonts/*.otf ~/.fonts/ 2>/dev/null || true
          
          # Create symlinks with different naming conventions
          for font in /usr/share/fonts/opentype/sf-pro/*.otf; do
            # Create symlinks with spaces in the name
            base=$(basename "$font")
            name_with_spaces=$(echo "$base" | sed 's/-/ /g' | sed 's/\.otf$//')
            sudo ln -sf "$font" "/usr/local/share/fonts/$name_with_spaces.otf" 2>/dev/null || true
          done
          
          # Ensure SF Pro Display symlinks exist
          sudo ln -sf /usr/share/fonts/opentype/sf-pro/SF-Pro-Display-Semibold.otf "/usr/local/share/fonts/SF Pro Display Semibold.otf" 2>/dev/null || true
          sudo ln -sf /usr/share/fonts/opentype/sf-pro/SF-Pro-Display-Regular.otf "/usr/local/share/fonts/SF Pro Display.otf" 2>/dev/null || true
          
          # Rebuild font cache in multiple ways
          sudo fc-cache -f -v
          sudo mkfontscale /usr/share/fonts/opentype/sf-pro
          sudo mkfontdir /usr/share/fonts/opentype/sf-pro
          sudo mkfontscale /usr/local/share/fonts
          sudo mkfontdir /usr/local/share/fonts

      - name: Extensive font debugging
        run: |
          echo "=== Font directories ==="
          ls -la /usr/share/fonts/opentype/sf-pro/
          ls -la /usr/local/share/fonts/
          
          echo "=== FC-List output ==="
          fc-list | grep -i "SF Pro" || echo "SF Pro not found in fc-list"
          fc-list | grep -i "SF-Pro" || echo "SF-Pro not found in fc-list"
          
          echo "=== Font configuration ==="
          fc-match "SF Pro Display"
          fc-match "SF Pro Display Semibold"
          
          echo "=== Font cache info ==="
          fc-cache -v

      - name: Find changed SVG files
        id: changed
        run: |
          files=$(git diff --name-only HEAD^ HEAD | grep '\.svg$' || true)
          echo "files=$files" >> "$GITHUB_OUTPUT"
          
          # Debug - print content of first changed SVG
          if [ -n "$files" ]; then
            first_file=$(echo "$files" | head -n 1)
            echo "First changed SVG file: $first_file"
            echo "SVG content:"
            cat "$first_file" | grep -i "font"
          fi

      - name: Convert SVG → PNG using Chrome headless
        if: steps.changed.outputs.files != ''
        run: |
          # Install Node.js and puppeteer for better font rendering
          sudo apt-get install -y nodejs npm
          sudo npm install -g puppeteer-core puppeteer
          
          # Create a simple Node.js script for SVG to PNG conversion
          cat > convert.js << 'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const path = require('path');

          async function convertSvgToPng(svgPath, pngPath) {
            const browser = await puppeteer.launch({
              headless: 'new',
              args: ['--no-sandbox', '--font-render-hinting=none']
            });
            const page = await browser.newPage();
            
            // Read SVG content
            const svgContent = fs.readFileSync(svgPath, 'utf8');
            
            // Create HTML with embedded SVG
            const html = `
              <!DOCTYPE html>
              <html>
                <head>
                  <style>
                    @font-face {
                      font-family: 'SF Pro Display';
                      src: local('SF Pro Display');
                    }
                    body {
                      margin: 0;
                      padding: 0;
                    }
                    svg {
                      width: 1080px;
                      height: 1350px;
                    }
                  </style>
                </head>
                <body>
                  ${svgContent}
                </body>
              </html>
            `;
            
            await page.setContent(html);
            await page.setViewport({ width: 1080, height: 1350 });
            
            // Wait for fonts to load
            await page.waitForTimeout(1000);
            
            // Take screenshot
            await page.screenshot({
              path: pngPath,
              fullPage: true,
              omitBackground: false,
              quality: 100
            });
            
            await browser.close();
            console.log(`Converted ${svgPath} to ${pngPath}`);
          }

          // Get command line arguments
          const svgPath = process.argv[2];
          const pngPath = process.argv[3];
          
          if (!svgPath || !pngPath) {
            console.error('Usage: node convert.js <svg-path> <png-path>');
            process.exit(1);
          }
          
          convertSvgToPng(svgPath, pngPath).catch(console.error);
          EOF
          
          # Use the script to convert SVGs to PNGs
          for f in ${{ steps.changed.outputs.files }}; do
            png="${f%.svg}.png"
            echo "Converting $f ⇒ $png using Chrome headless"
            node convert.js "$f" "$png"
          done

      - name: Alternative conversion using rsvg-convert as backup
        if: steps.changed.outputs.files != ''
        run: |
          echo "Attempting alternative conversion with rsvg-convert as backup"
          for f in ${{ steps.changed.outputs.files }}; do
            png="${f%.svg}.backup.png"
            echo "Converting $f ⇒ $png using rsvg-convert"
            rsvg-convert -f png -w 1080 -h 1350 --keep-aspect-ratio --dpi-x 300 --dpi-y 300 "$f" -o "$png"
            
            # Check if primary conversion succeeded
            main_png="${f%.svg}.png"
            if [ ! -f "$main_png" ] || [ ! -s "$main_png" ]; then
              echo "Primary conversion failed, using backup for $f"
              mv "$png" "$main_png"
            else
              echo "Primary conversion succeeded for $f, removing backup"
              rm "$png"
            fi
          done

      - name: Commit and push PNGs
        if: steps.changed.outputs.files != ''
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name  "GitHub Action"
          git add "**/*.png"
          git commit -m "Add PNG versions of SVG files" || echo "No PNG changes"
          git push
